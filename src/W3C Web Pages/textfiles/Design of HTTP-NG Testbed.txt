

  
  
  Design of HTTP-NG Testbed



  
    NOTE-HTTP-NG-testbed-980710
  


  
    Design of HTTP-NG Testbed
  


  
    W3C Note 10 July 1998
  


  
    This version:
  
    http://www.w3.org/TR/1998/NOTE-HTTP-NG-testbed-980710
  
    Latest Released Version:
  
    http://www.w3.org/TR/NOTE-HTTP-NG-testbed
  
    Author:
  
    Daniel Veillard,
    <veillard@w3.org>

Copyright  ©  1998 W3C (MIT, INRIA, Keio ), All Rights Reserved. W3C liability, trademark, document use and software licensing rules apply.

  Status of this Document


This is a note published by the
HTTP-NG Protocol Design
Working Group describing the goals, current state and future development
of the HTTP-NG testbed..

This document has been produced as part of the
W3C HTTP-NG
Activity. This is work in progress and does not imply endorsement by,
or the consensus of, either W3C or members of the
HTTP-NG Protocol
Design and HTTP-NG
Web Characterization Working Groups. This document is subject to change,
check the reference to the latest version.

The goal of the testbeds are to evaluate the feasibility of the
HTTP-NG model, its
performances, its extendibility, and the ability to integrate the HTTP-NG
model in he existing Web architecture. Building higher level demonstration
exhibiting the extra benefits of the HTTP-NG model is also planned. The suggested
experiments are of three kinds:

  
    A base testbed infrastructure
  
    Higher level functionalities demonstrations
  
    Transition strategy evaluation
  
    Available tools and codebases
  
    Current status


This document describes the expected architecture for each kind of testbed,
the main pieces of code used, the expected experiments and way to evaluate
the results.

This document is part of a suite of documents describing the HTTP-NG design
and prototype implementation:

  
    HTTP-NG Short- and Longterm Goals, WD
  
    HTTP-NG Architectural Model, WD
  
    HTTP-NG Wire Protocol, WD
  
    The Classic Web Interfaces in HTTP-NG, WD
  
    The MUX Protocol, WD
  
    Description of the HTTP-NG Testbed, Note


Please send comments on this specification to
<www-http-ng-comments@w3.org>.

  The base testbed infrastructure


The purpose is to evaluate the suitability one can expect from HTTP-NG when
running basic HTTP interfaces using HTTP-NG protocol on both the client side
and the server. The architecture is a client issuing HTTP-NG requests, a
server answering these requests using a realistic set of Web pages. The requests
can either be generated by the SURGE URI generator tuned to reflect various
kind of common HTTP usage, or hand coded to reflect more specific uses. The
client may either run in "one shot" mode fetching a page and the related
inlined objects for the purpose of analyzing a complete trace of a session,
or in robot mode to produce a realistic load on the server. One goal is to
be able to run the exact same tests in a similar enviroment but using the
HTTP/1.1 protocol, in order to compare the characteristics of both stacks.



The first goal of this base testbed experiment is to verify that the HTTP-NG
specification can actually handle the functionalities used by HTTP 1.x users.
The output of the Web Characterization Working Group will be a set of scenarios
exhibiting common HTTP 1.x practices. The SURGE program will then be used
to generate a realistic set of URI and time stamps, which in turn will be
used by the HTTP-NG robot client as requests to the HTTP-NG server. One will
also need to verify that not so current practices - the top 10 kludge usage
of HTTP - can also be served and this will be handled in a more specific
fashion, either generating the URI by hand or modify the client/server software
(for example when running another protocol on top of HTTP).

The second goal of this series of experiments is to analyze the behavior
and performances of HTTP-NG under different qualities of services. One should
at least try to reproduce the following commonly found network conditions:

  
    LAN: high bandwidth, low latencies.
  
    WAN: medium bandwidth, high latencies
  
    Dialup: low bandwidth, high latencies
  
    Satellite links (asymetric), wireless, etc.


The following metrics are of interest:

  
    latency: time between client start of the request, at the API level, and
    the availability of the beginning of the user level data
  
    throughput: this can be expressed using various different metrics, especially
    the size of the user data transferred by unit of time for one shot tests
    and the number of requests processed per second in robot mode.
  
    number of packets used
  
    average size of packets
  
    number of operating system calls needed
  
    load induced on the machines (system/user/io)


This requires at least two machines and it may also be extremely useful to
get a dedicated piece of hardware sitting between the client and the server
which allows to simulate in a reproducible manner various network quality
of Services (bandwidth and latency tweaking). This may also be done using
an extra dedicated machine and a tunneling software.

Considering the software, one can be worried with the actual performances
of a Java, even if things may improve a lot in a not so distant future. Currently
is sound more reasonable to do the performance evaluation using a C code
base, and use ILU for both the client and server side. One should also try
to estimate the induced cost of genericity - ILU being a very generic system
supporting a lot of protocols and offering stubs for various languages.

Considering the server side, one need to implement some sample code sitting
behind the stubs generated from the interfaces by the ILU stubber. For this
purpose, ILU has been integrated into the Apache server.

The result of the tests should be compared with
the
actual numbers obtained for the HTTP 1.1 . Getting half an order of magnitude
faster on latencies for LAN should not be too difficult, but we have to compare
with the full range of network Quality of Service all the metrics and check
that it's at least as good on each points before considering the results
a success.

The next goal of this testbed is to test the ability of HTTP-NG specification
to support proxies and caching. The base testbed will then be extended by
adding a proxy/cache for HTTP-NG between the client and the server.

  


The analysis of the results on this configuration will probably a bit more
difficult to establish, here are a few points to look at:

  
    performances in term of both throughput and CPU time usage.
  
    support for expiration time, content negotiation
  
    feasibility of differential updates and Push schemes for update of a set
    of caches


One should keep in mind that caching in the Web is still in its infancy and
the HTTP-NG specification must be able to handle the big changes in Web caching
technology which are likely to occur within the next few years. Extendibility
is a key point of HTTP-NG design from the proxying and caching point of view.

  Higher level functionalities


This testbed is really where we want to exhibit the extra capabilities of
HTTP-NG over HTTP 1.x . At this time it's somewhat difficult to predict how
extended this testbed will be, but a simple core experiment is definitely
needed to demonstrate the concepts behind HTTP-NG.

Here  is an example based on existing W3C testbeds:

  
    A DOM (Document Object Model) demonstration,
    where the Web client exports via HTTP-NG it's internal documents structure
    and the associated interfaces as defined by the DOM WG document.
    
      
    
    
    This testbed will demonstrate how the general interface of the Web based
    on the "fetch then display" metaphor could shift onto a cooperative environment
    relying on distributed structured documents.
    
    A DOM implementation on top of Amaya/Thot is likely to occur, and adding
    the support from HTTP-NG should be fairly trivial. This would provide a good
    framework for demonstration of extra capabilities made possible by HTTP-NG,
    here is a few suggestions:
    
      
	push like demo, where content is inserted using the DOM API from